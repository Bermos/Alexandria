/*
 * Alexandria
 *
 * Alexandria
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"os"
	"strings"

	"github.com/gorilla/mux"
)

// TerraformApiController binds http requests to an api service and writes the service results to the http response
type TerraformApiController struct {
	service      TerraformApiServicer
	errorHandler ErrorHandler
}

// TerraformApiOption for how the controller is set up.
type TerraformApiOption func(*TerraformApiController)

// WithTerraformApiErrorHandler inject ErrorHandler into controller
func WithTerraformApiErrorHandler(h ErrorHandler) TerraformApiOption {
	return func(c *TerraformApiController) {
		c.errorHandler = h
	}
}

// NewTerraformApiController creates a default api controller
func NewTerraformApiController(s TerraformApiServicer, opts ...TerraformApiOption) Router {
	controller := &TerraformApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TerraformApiController
func (c *TerraformApiController) Routes() Routes {
	return Routes{
		{
			"TerraformModulesV1NamespaceNameSystemVersionDownloadGet",
			strings.ToUpper("Get"),
			"/terraform/modules/v1/{namespace}/{name}/{system}/{version}/download",
			c.TerraformModulesV1NamespaceNameSystemVersionDownloadGet,
		},
		{
			"TerraformModulesV1NamespaceNameSystemVersionPublishPut",
			strings.ToUpper("Put"),
			"/terraform/modules/v1/{namespace}/{name}/{system}/{version}/publish",
			c.TerraformModulesV1NamespaceNameSystemVersionPublishPut,
		},
		{
			"TerraformModulesV1NamespaceNameSystemVersionsGet",
			strings.ToUpper("Get"),
			"/terraform/modules/v1/{namespace}/{name}/{system}/versions",
			c.TerraformModulesV1NamespaceNameSystemVersionsGet,
		},
		{
			"TerraformProvidersV1NamespaceTypeVersionDownloadOsArchGet",
			strings.ToUpper("Get"),
			"/terraform/providers/v1/{namespace}/{type}/{version}/download/{os}/{arch}",
			c.TerraformProvidersV1NamespaceTypeVersionDownloadOsArchGet,
		},
		{
			"TerraformProvidersV1NamespaceTypeVersionsGet",
			strings.ToUpper("Get"),
			"/terraform/providers/v1/{namespace}/{type}/versions",
			c.TerraformProvidersV1NamespaceTypeVersionsGet,
		},
	}
}

// TerraformModulesV1NamespaceNameSystemVersionDownloadGet -
func (c *TerraformApiController) TerraformModulesV1NamespaceNameSystemVersionDownloadGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	namespaceParam := params["namespace"]

	nameParam := params["name"]

	systemParam := params["system"]

	versionParam := params["version"]

	result, err := c.service.TerraformModulesV1NamespaceNameSystemVersionDownloadGet(r.Context(), namespaceParam, nameParam, systemParam, versionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// TerraformModulesV1NamespaceNameSystemVersionPublishPut -
func (c *TerraformApiController) TerraformModulesV1NamespaceNameSystemVersionPublishPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	namespaceParam := params["namespace"]

	nameParam := params["name"]

	systemParam := params["system"]

	versionParam := params["version"]

	bodyParam := new(os.File)
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.TerraformModulesV1NamespaceNameSystemVersionPublishPut(r.Context(), namespaceParam, nameParam, systemParam, versionParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// TerraformModulesV1NamespaceNameSystemVersionsGet -
func (c *TerraformApiController) TerraformModulesV1NamespaceNameSystemVersionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	namespaceParam := params["namespace"]

	nameParam := params["name"]

	systemParam := params["system"]

	result, err := c.service.TerraformModulesV1NamespaceNameSystemVersionsGet(r.Context(), namespaceParam, nameParam, systemParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// TerraformProvidersV1NamespaceTypeVersionDownloadOsArchGet -
func (c *TerraformApiController) TerraformProvidersV1NamespaceTypeVersionDownloadOsArchGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	namespaceParam := params["namespace"]

	type_Param := params["type"]

	versionParam := params["version"]

	osParam := params["os"]

	archParam := params["arch"]

	result, err := c.service.TerraformProvidersV1NamespaceTypeVersionDownloadOsArchGet(r.Context(), namespaceParam, type_Param, versionParam, osParam, archParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// TerraformProvidersV1NamespaceTypeVersionsGet -
func (c *TerraformApiController) TerraformProvidersV1NamespaceTypeVersionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	namespaceParam := params["namespace"]

	type_Param := params["type"]

	result, err := c.service.TerraformProvidersV1NamespaceTypeVersionsGet(r.Context(), namespaceParam, type_Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
