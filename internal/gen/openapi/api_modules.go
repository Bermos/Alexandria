/*
 * Alexandria
 *
 * Alexandria
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"
)

// ModulesApiController binds http requests to an api service and writes the service results to the http response
type ModulesApiController struct {
	service      ModulesApiServicer
	errorHandler ErrorHandler
}

// ModulesApiOption for how the controller is set up.
type ModulesApiOption func(*ModulesApiController)

// WithModulesApiErrorHandler inject ErrorHandler into controller
func WithModulesApiErrorHandler(h ErrorHandler) ModulesApiOption {
	return func(c *ModulesApiController) {
		c.errorHandler = h
	}
}

// NewModulesApiController creates a default api controller
func NewModulesApiController(s ModulesApiServicer, opts ...ModulesApiOption) Router {
	controller := &ModulesApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ModulesApiController
func (c *ModulesApiController) Routes() Routes {
	return Routes{
		{
			"ModulesGet",
			strings.ToUpper("Get"),
			"/modules",
			c.ModulesGet,
		},
	}
}

// ModulesGet -
func (c *ModulesApiController) ModulesGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ModulesGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
