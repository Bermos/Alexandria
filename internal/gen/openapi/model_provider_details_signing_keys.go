/*
 * Alexandria
 *
 * Alexandria
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type ProviderDetailsSigningKeys struct {
	GpgPublicKeys []ProviderDetailsSigningKeysGpgPublicKeysInner `json:"gpg_public_keys"`
}

// AssertProviderDetailsSigningKeysRequired checks if the required fields are not zero-ed
func AssertProviderDetailsSigningKeysRequired(obj ProviderDetailsSigningKeys) error {
	elements := map[string]interface{}{
		"gpg_public_keys": obj.GpgPublicKeys,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.GpgPublicKeys {
		if err := AssertProviderDetailsSigningKeysGpgPublicKeysInnerRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseProviderDetailsSigningKeysRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ProviderDetailsSigningKeys (e.g. [][]ProviderDetailsSigningKeys), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseProviderDetailsSigningKeysRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aProviderDetailsSigningKeys, ok := obj.(ProviderDetailsSigningKeys)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertProviderDetailsSigningKeysRequired(aProviderDetailsSigningKeys)
	})
}
